{"ast":null,"code":"/**\n * words.js : ducks 패턴을 사용한 words 모듈 파일\n * 기능 : 단어 불러오기(무한스크롤), 등록, 암기/미암기 토글, 수정, 삭제\n */\nimport { firestore } from \"../../firebase\";\nconst words_db = firestore.collection(\"words\"); // 액션\n\nconst LOAD = \"words/LOAD\";\nconst LOAD_MORE = \"words/LOAD_MORE\";\nconst ADD = \"word/ADD\";\nconst MODIFY = \"word/MODIFY\";\nconst COMPLETE = \"word/COMPLETE\";\nconst DELETE = \"word/DELETE\"; // 초기값\n\nconst initialState = {\n  word_list: [],\n  lastValue: 0\n}; // 액션함수\n\nexport const loadWords = (words, lastValue) => ({\n  type: LOAD,\n  words,\n  lastValue\n});\nexport const loadMoreWords = (words, lastValue) => ({\n  type: LOAD_MORE,\n  words,\n  lastValue\n});\nexport const addWord = word => ({\n  type: ADD,\n  word\n});\nexport const updateComplete = id => ({\n  type: COMPLETE,\n  id\n});\nexport const modifyWord = word => ({\n  type: MODIFY,\n  word\n});\nexport const deleteWord = id => ({\n  type: DELETE,\n  id\n}); // thunk\n// firebase에서 단어들을 처음 불러오는 함수 (특이사항: 무한스크롤 적용을 위해 10개만 끊어서 가져옴)\n\nexport const loadWordsFB = () => {\n  return function (dispatch) {\n    let words = [];\n    let lastValue;\n    words_db.orderBy(\"date\", \"desc\") // date라는 key를 기준으로 내림차순 정렬\n    .limit(10) // 10개만\n    .get().then(docs => {\n      docs.forEach(doc => {\n        words = [...words, {\n          id: doc.id,\n          ...doc.data()\n        }];\n        lastValue = doc.data().date; // 마지막으로 가져온 date값(다음 값을 가져오기 위해 저장)\n      });\n    }).then(res => dispatch(loadWords(words, lastValue)));\n  };\n}; // firebase에서 다음 단어들을 불러오는 함수\n\nexport const loadMoreWordsFB = value => {\n  return function (dispatch) {\n    let words = [];\n    let beforeNum = parseInt(value); // 가장 마지막으로 가져온 date값을 의미\n\n    let lastValue;\n    words_db.orderBy(\"date\", \"desc\").startAfter(beforeNum) // 가장 마지막으로 가져온 값 다음부터 시작\n    .limit(10).get().then(docs => {\n      docs.forEach(doc => {\n        if (doc.exists) {\n          words = [...words, {\n            id: doc.id,\n            ...doc.data()\n          }];\n          lastValue = doc.data().date;\n        }\n      });\n    }).then(res => dispatch(loadMoreWords(words, lastValue)));\n  };\n}; // 새로운 단어 등록 함수\n\nexport const addWordFB = word => {\n  return function (dispatch) {\n    let new_word;\n    words_db.add(word).then(doc => {\n      new_word = { ...word,\n        id: doc.id\n      };\n    }).then(res => dispatch(addWord(new_word)));\n  };\n}; // 암기/미암기 토글 함수\n\nexport const updateCompleteFB = word => {\n  return function (dispatch) {\n    words_db.doc(word.id).update({\n      completed: !word.completed\n    });\n    dispatch(updateComplete(word.id));\n  };\n}; // 단어 내용 변경 함수\n\nexport const modifyWordFB = (word, id) => {\n  return function (dispatch) {\n    words_db.doc(id).update(word);\n    const new_word = { ...word,\n      id\n    };\n    dispatch(modifyWord(new_word));\n  };\n}; // 단어 삭제 함수\n\nexport const deleteWordFB = id => {\n  return function (dispatch) {\n    words_db.doc(id).delete();\n    dispatch(deleteWord(id));\n  };\n}; // 리듀서\n\nfunction words() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"words/LOAD\":\n      return { ...state,\n        word_list: action.words,\n        lastValue: action.lastValue\n      };\n\n    case \"words/LOAD_MORE\":\n      return { ...state,\n        word_list: [...state.word_list, ...action.words],\n        lastValue: action.lastValue\n      };\n\n    case \"word/ADD\":\n      let added_words = [action.word, ...state.word_list];\n      return { ...state,\n        word_list: added_words\n      };\n\n    case \"word/COMPLETE\":\n      const new_word_list = state.word_list.map(word => word.id === action.id ? { ...word,\n        completed: !word.completed\n      } : word);\n      return { ...state,\n        word_list: new_word_list\n      };\n\n    case \"word/MODIFY\":\n      let modified_words = state.word_list.map(word => word.id === action.word.id ? { ...word,\n        ...action.word\n      } : word);\n      return { ...state,\n        word_list: modified_words\n      };\n\n    case \"word/DELETE\":\n      let left_words = state.word_list.filter(word => word.id !== action.id);\n      return { ...state,\n        word_list: left_words\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default words;","map":{"version":3,"names":["firestore","words_db","collection","LOAD","LOAD_MORE","ADD","MODIFY","COMPLETE","DELETE","initialState","word_list","lastValue","loadWords","words","type","loadMoreWords","addWord","word","updateComplete","id","modifyWord","deleteWord","loadWordsFB","dispatch","orderBy","limit","get","then","docs","forEach","doc","data","date","res","loadMoreWordsFB","value","beforeNum","parseInt","startAfter","exists","addWordFB","new_word","add","updateCompleteFB","update","completed","modifyWordFB","deleteWordFB","delete","state","action","added_words","new_word_list","map","modified_words","left_words","filter"],"sources":["/Users/hyori/Desktop/study/sparta/week4/homework_w4/hw_4/src/redux/module/words.js"],"sourcesContent":["/**\n * words.js : ducks 패턴을 사용한 words 모듈 파일\n * 기능 : 단어 불러오기(무한스크롤), 등록, 암기/미암기 토글, 수정, 삭제\n */\n\n import { firestore } from \"../../firebase\";\n\n const words_db = firestore.collection(\"words\");\n \n // 액션\n const LOAD = \"words/LOAD\";\n const LOAD_MORE = \"words/LOAD_MORE\";\n const ADD = \"word/ADD\";\n const MODIFY = \"word/MODIFY\";\n const COMPLETE = \"word/COMPLETE\";\n const DELETE = \"word/DELETE\";\n \n // 초기값\n const initialState = {\n   word_list: [],\n   lastValue: 0,\n };\n \n // 액션함수\n export const loadWords = (words, lastValue) => ({\n   type: LOAD,\n   words,\n   lastValue,\n });\n \n export const loadMoreWords = (words, lastValue) => ({\n   type: LOAD_MORE,\n   words,\n   lastValue,\n });\n export const addWord = (word) => ({ type: ADD, word });\n export const updateComplete = (id) => ({ type: COMPLETE, id });\n export const modifyWord = (word) => ({ type: MODIFY, word });\n export const deleteWord = (id) => ({ type: DELETE, id });\n \n // thunk\n \n // firebase에서 단어들을 처음 불러오는 함수 (특이사항: 무한스크롤 적용을 위해 10개만 끊어서 가져옴)\n export const loadWordsFB = () => {\n   return function (dispatch) {\n     let words = [];\n     let lastValue;\n     words_db\n       .orderBy(\"date\", \"desc\") // date라는 key를 기준으로 내림차순 정렬\n       .limit(10) // 10개만\n       .get()\n       .then((docs) => {\n         docs.forEach((doc) => {\n           words = [...words, { id: doc.id, ...doc.data() }];\n           lastValue = doc.data().date; // 마지막으로 가져온 date값(다음 값을 가져오기 위해 저장)\n         });\n       })\n       .then((res) => dispatch(loadWords(words, lastValue)));\n   };\n };\n \n // firebase에서 다음 단어들을 불러오는 함수\n export const loadMoreWordsFB = (value) => {\n   return function (dispatch) {\n     let words = [];\n     let beforeNum = parseInt(value); // 가장 마지막으로 가져온 date값을 의미\n     let lastValue;\n     words_db\n       .orderBy(\"date\", \"desc\")\n       .startAfter(beforeNum) // 가장 마지막으로 가져온 값 다음부터 시작\n       .limit(10)\n       .get()\n       .then((docs) => {\n         docs.forEach((doc) => {\n           if (doc.exists) {\n             words = [...words, { id: doc.id, ...doc.data() }];\n             lastValue = doc.data().date;\n           }\n         });\n       })\n       .then((res) => dispatch(loadMoreWords(words, lastValue)));\n   };\n };\n \n // 새로운 단어 등록 함수\n export const addWordFB = (word) => {\n   return function (dispatch) {\n     let new_word;\n     words_db\n       .add(word)\n       .then((doc) => {\n         new_word = { ...word, id: doc.id };\n       })\n       .then((res) => dispatch(addWord(new_word)));\n   };\n };\n \n // 암기/미암기 토글 함수\n export const updateCompleteFB = (word) => {\n   return function (dispatch) {\n     words_db.doc(word.id).update({ completed: !word.completed });\n     dispatch(updateComplete(word.id));\n   };\n };\n \n // 단어 내용 변경 함수\n export const modifyWordFB = (word, id) => {\n   return function (dispatch) {\n     words_db.doc(id).update(word);\n     const new_word = { ...word, id };\n     dispatch(modifyWord(new_word));\n   };\n };\n \n // 단어 삭제 함수\n export const deleteWordFB = (id) => {\n   return function (dispatch) {\n     words_db.doc(id).delete();\n     dispatch(deleteWord(id));\n   };\n };\n \n // 리듀서\n function words(state = initialState, action) {\n   switch (action.type) {\n     case \"words/LOAD\":\n       return {\n         ...state,\n         word_list: action.words,\n         lastValue: action.lastValue,\n       };\n     case \"words/LOAD_MORE\":\n       return {\n         ...state,\n         word_list: [...state.word_list, ...action.words],\n         lastValue: action.lastValue,\n       };\n     case \"word/ADD\":\n       let added_words = [action.word, ...state.word_list];\n       return {\n         ...state,\n         word_list: added_words,\n       };\n     case \"word/COMPLETE\":\n       const new_word_list = state.word_list.map((word) =>\n         word.id === action.id ? { ...word, completed: !word.completed } : word\n       );\n       return {\n         ...state,\n         word_list: new_word_list,\n       };\n     case \"word/MODIFY\":\n       let modified_words = state.word_list.map((word) =>\n         word.id === action.word.id ? { ...word, ...action.word } : word\n       );\n       return {\n         ...state,\n         word_list: modified_words,\n       };\n     case \"word/DELETE\":\n       let left_words = state.word_list.filter((word) => word.id !== action.id);\n       return {\n         ...state,\n         word_list: left_words,\n       };\n     default:\n       return state;\n   }\n }\n \n export default words;\n "],"mappings":"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"},"metadata":{},"sourceType":"module"}